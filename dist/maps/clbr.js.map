{"version":3,"names":[],"mappings":"","sources":["clbr.js"],"sourcesContent":["(function(window, $) {\n  \n  if (!$) {\n    return console.error('jQuery required.');\n  }\n\n  var clbr = window.clbr = window.clbr || {};\n\n  clbr.authApi = function (url) {\n    return {\n      // Sign up by email and password\n      signup: function (email, password, fn) {\n        var data = {\n          email: email,\n          password: password\n        };\n\n        $.post(url + '/signup', data)\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Sign in by email and password\n      signin: function (email, password, fn) {\n        var data = {\n          email: email,\n          password: password\n        };\n\n        $.post(url + '/signin', data)\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Sets redirect url after social registrations\n      setRedirect: function (redirect_url, fn) {\n        var data = {\n          callbackUri: redirect_url\n        };\n\n        $.ajax({\n            url: url + '/social',\n            type: 'POST',\n            data: data,\n            xhrFields: {\n              withCredentials: true\n           }\n          })\n          .done(function() {\n            fn();\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Registration/login via Facebook\n      facebook: function () {\n        window.location.href = url + '/facebook';\n      },\n\n      // Registration/login via Twitter\n      twitter: function () {\n        window.location.href = url + '/twitter';\n      },\n\n      // Registration/login via Google\n      google: function () {\n        window.location.href = url + '/google';\n      },\n\n      // Registration/login via Vk\n      vk: function () {\n        window.location.href = url + '/vk';\n      },\n\n      // Updates access & refresh tokens\n      refresh: function (refreshToken, fn) {\n        $.ajax({\n            url: url + '/refresh',\n            type: 'GET',\n            headers: {'Authorization': 'JWT ' + refreshToken}\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Signs out current user\n      signout: function (refreshToken, fn) {\n        $.ajax({\n            url: url + '/signout',\n            type: 'DELETE',\n            headers: {'Authorization': 'JWT ' + refreshToken}\n          })\n          .done(function() {\n            fn();\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Deletes all sessions for current user\n      signoutall: function (refreshToken, fn) {\n        $.ajax({\n            url: url + '/signoutall',\n            type: 'DELETE',\n            headers: {'Authorization': 'JWT ' + refreshToken}\n          })\n          .done(function() {\n            fn();\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Merges two accaunts\n      merge: function (access_token1, access_token2, fn) {\n        var data = {\n          token1: access_token1,\n          token2: access_token2\n        };\n\n        $.ajax({\n            url: url + '/merge',\n            type: 'POST'\n          })\n          .done(function() {\n            fn();\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Unmerges social account\n      unmerge: function (access_token, provider, id, fn) {\n        var data = {\n          provider: provider,\n          id: id\n        };\n\n        $.ajax({\n            url: url + '/unmerge',\n            type: 'DELETE',\n            headers: {'Authorization': 'JWT ' + access_token}\n          })\n          .done(function() {\n            fn();\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Gets user info\n      get: function (access_token, fn) {\n        $.ajax({\n            url: url + '/account',\n            type: 'GET',\n            headers: {'Authorization': 'JWT ' + access_token}\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Deletes user account\n      del: function (access_token, fn) {\n        $.ajax({\n            url: url + '/account',\n            type: 'DELETE',\n            headers: {'Authorization': 'JWT ' + access_token}\n          })\n          .done(function() {\n            fn();\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      }\n    };\n  };\n\n})(window, window.jQuery);\n(function(window, $) {\n  \n  if (!$) {\n    return console.error('jQuery required.');\n  }\n\n  var clbr = window.clbr = window.clbr || {};\n\n  clbr.profilesApi = function (url) {\n    return {\n      // Get full profile info\n      get: function (id, access_token, fn) {\n        $.ajax({\n            url: url + '/' + id,\n            type: 'GET',\n            headers: {'Authorization': 'JWT ' + access_token}\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Get public profile info\n      public: function (id, access_token, fn) {\n        $.ajax({\n            url: url + '/public/' + id,\n            type: 'GET',\n            headers: {'Authorization': 'JWT ' + access_token}\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Update profile info\n      update: function (id, email, name, access_token, fn) {\n        var data = {\n          email: email,\n          name: name\n        };\n\n        $.ajax({\n            url: url + '/' + id,\n            type: 'PUT',\n            headers: {'Authorization': 'JWT ' + access_token},\n            data: data\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      }\n    };\n  };\n\n})(window, window.jQuery);\n(function(window, $) {\n  \n  if (!$) {\n    return console.error('jQuery required.');\n  }\n\n  var clbr = window.clbr = window.clbr || {};\n\n  clbr.projectsApi = function (url) {\n    return {\n      // Get project info\n      get: function (id, access_token, fn) {\n        if (!fn) {\n          fn = access_token;\n          access_token = null;\n        }\n\n        var headers = {};\n        if (access_token) {\n          headers['Authorization'] = 'JWT ' + access_token;\n        }\n        \n        $.ajax({\n            url: url + '/' + id,\n            type: 'GET',\n            headers: headers\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // List all projects for current user\n      listMy: function (access_token, fn) {\n        $.ajax({\n            url: url,\n            type: 'GET',\n            headers: {'Authorization': 'JWT ' + access_token}\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // List all public projects\n      listPublic: function (top, last_id, fn) {\n        if (!fn) {\n          fn = last_id;\n          last_id = null;\n        }\n\n        last_id = last_id || '';\n\n        $.ajax({\n            url: url + '/all?' + 'top=' + top + '&last=' + last_id,\n            type: 'GET'\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Creates new project\n      save: function (data, access_token, fn) {\n        $.ajax({\n            url: url + '/' + id,\n            type: 'POST',\n            headers: {'Authorization': 'JWT ' + access_token},\n            data: data\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      },\n\n      // Update profile info\n      update: function (id, data, access_token, fn) {\n        $.ajax({\n            url: url + '/' + id,\n            type: 'PUT',\n            headers: {'Authorization': 'JWT ' + access_token},\n            data: data\n          })\n          .done(function(result) {\n            fn(null, result);\n          })\n          .fail(function(jqXHR, textStatus, err) {\n            fn(err);\n          });\n      }\n    };\n  };\n\n})(window, window.jQuery);\n(function(window, angular, clbr) {\n  \"use strict\";\n\n  var module = angular.module('auth-api', ['settings']);\n\n  module.factory('authApi', [\n    'urls', function (urls) {\n      return clbr.authApi(urls.authApi);\n    }\n  ]);  \n    \n})(window, window.angular, window.clbr);\n(function(window, angular) {\n    \"use strict\";\n\n    angular.module('constants', []) \n      .constant('events', {\n      \t'login': 'login',\n        'logout': 'logout',\n        'profileUpdate': 'profileUpdate'\n      });\n    \n})(window, window.angular);\n(function(window, angular) {\n    \"use strict\";\n    \n    var module = angular.module('directives', ['menu']);\n\n    // input confirmation (e.g. passwords match)\n    module.directive('cbConfirm', function() {\n        return {\n          restrict: 'A',\n          require: 'ngModel',\n          link: function(scope, elem, attrs, control) {\n            var checker = function() {\n              var e1 = scope.$eval(attrs.ngModel);\n              var e2 = scope.$eval(attrs.cbConfirm);\n              return e1 == e2 || (!e1 && !e2);\n            };\n            scope.$watch(checker, function(value) {\n              // set the form control to valid if both \n              // inputs are the same, else invalid\n              control.$setValidity(\"match\", value);\n            });\n          }\n        };\n    });\n    \n})(window, window.angular);\n(function(window, angular) {\n    \"use strict\";\n\n    var module = angular.module('exceptions', []);\n\n    module.factory('$exceptionHandler', [\n      function () {\n        return function (exception) {\n          var message = exception.message;\n          if (!message || message === '[object Object]') {\n              message = 'Application Error';\n          }\n\n          alert(message);\n        };\n      }\n    ]);\n    \n})(window, window.angular);\n(function(window, angular) {\n    \"use strict\";\n\n    var module = angular.module('home', [\n      'ui.router'\n    ]);\n\n    // Routes\n    module.config([\n      '$stateProvider', function ($stateProvider) {\n        $stateProvider\n          .state('home', {\n            url: '/',\n            templateUrl: 'home.html',\n            controller: 'HomeCtrl',\n            data: {\n              pageTitle: 'Clickberry Video Portal'\n            }\n          });\n        }\n    ]);\n\n    // Controllers\n    module.controller('HomeCtrl', [\n      '$scope', '$state',\n      function ($scope, $state) {\n\n        \n        \n      }\n    ]);\n    \n})(window, window.angular);\n(function (window, angular) {\n    \"use strict\";\n\n    var module = angular.module('menu', ['user', 'constants']);\n\n    module.directive('cbMenu', [\n        '$window','$state', 'events', 'user', function ($window, $state, events, user) {\n          return {\n            restrict: 'EA',\n            replace: true,\n            templateUrl: 'menu.html',\n            link: function($scope) {\n              $scope.menuExpanded = false;\n              $scope.toggleMenu = function($event) {\n                $scope.menuExpanded = !$scope.menuExpanded;\n                $event.stopPropagation();\n              };\n              angular.element($window).on('click', function () {\n                $scope.menuExpanded = false;\n                $scope.$digest(); // because we're out of angular digest cycle\n              });\n\n              $scope.user = null;\n              $scope.$on(events.login, function (event, data) {\n                $scope.user = data;\n                $scope.$digest();\n              });\n              $scope.$on(events.logout, function () {\n                $scope.user = null;\n                $state.go('home');\n              });\n              $scope.$on(events.profileUpdate, function (event, data) {\n                if ($scope.user) {\n                  $scope.user.name = data.name;\n                }\n                \n                $scope.$digest();\n              });\n\n              $scope.signoff = function () {\n                user.destroy();\n              };\n\n              $scope.signup = function () {\n                $state.go('signup');\n              };\n\n              $scope.signin = function () {\n                $state.go('signin');\n              };\n\n              $scope.profile = function () {\n                $state.go('profile');\n              };\n            }\n          };\n        }\n    ])\n\n})(window, window.angular);\n(function (window, angular) {\n    \"use strict\";\n\n    var module = angular.module('profile', [\n      'ui.router',\n      'profiles-api',\n      'user',\n      'constants'\n    ]);\n\n    // Routes\n    module.config([\n      '$stateProvider', function ($stateProvider) {\n        $stateProvider\n          .state('profile', {\n            url: '/profile',\n            templateUrl: 'profile.html',\n            controller: 'ProfileCtrl',\n            data: {\n              pageTitle: 'Your Profile on Clickberry'\n            }\n          });\n        }\n    ]);\n\n    // Controllers\n    module.controller('ProfileCtrl', [\n      '$rootScope', '$scope', '$state', 'profilesApi', 'user', 'events',\n      function ($rootScope, $scope, $state, profilesApi, user, events) {\n\n        if (!user.id) {\n          return $state.go('home');\n        }\n\n        $scope.profile = {};\n        $scope.loading = false;\n\n        $scope.submit = function (params) {\n          $scope.loading = true;\n          profilesApi.update(user.id, params.email, params.name, user.accessToken, function (err, data) {\n            if (err) { throw err; }\n            $scope.loading = false;\n            $scope.$digest();\n\n            $rootScope.$broadcast(events.profileUpdate, data);\n          });\n        };\n\n        (function load() {\n          $scope.loading = true;\n          profilesApi.get(user.id, user.accessToken, function (err, data) {\n            if (err) { throw err; }\n            $scope.profile = data;\n            $scope.loading = false;\n            $scope.$digest();\n          });\n        })();\n      }\n    ]);\n})(window, window.angular);\n(function(window, angular, clbr) {\n  \"use strict\";\n\n  var module = angular.module('profiles-api', ['settings']);\n\n  module.factory('profilesApi', [\n    'urls', function (urls) {\n      return clbr.profilesApi(urls.profilesApi);\n    }\n  ]);  \n    \n})(window, window.angular, window.clbr);\n(function(window, angular, clbr) {\n  \"use strict\";\n\n  var module = angular.module('projects-api', ['settings']);\n\n  module.factory('projectsApi', [\n    'urls', function (urls) {\n      return clbr.projectsApi(urls.projectsApi);\n    }\n  ]);\n    \n})(window, window.angular, window.clbr);\n(function(window, angular) {\n    \"use strict\";\n\n    angular.module('settings', []) \n      .constant('urls', {\n        'authApi': 'http://auth.qa.clbr.ws',\n        'profilesApi': 'http://profiles.qa.clbr.ws',\n        'projectsApi': 'http://projects.qa.clbr.ws'\n      });\n    \n})(window, window.angular);\n(function (window, angular) {\n    \"use strict\";\n\n    var module = angular.module('signin', [\n      'ui.router',\n      'auth-api',\n      'user'\n    ]);\n\n    // Routes\n    module.config([\n      '$stateProvider', function ($stateProvider) {\n        $stateProvider\n          .state('signin', {\n            url: '/signin',\n            templateUrl: 'signin.html',\n            controller: 'SigninCtrl',\n            data: {\n              pageTitle: 'Sign in to Clickberry'\n            }\n          });\n        }\n    ]);\n\n    // Controllers\n    module.controller('SigninCtrl', [\n      '$scope', '$state', 'authApi', 'user',\n      function ($scope, $state, authApi, user) {\n\n        $scope.signin = {};\n        $scope.loading = false;\n\n        $scope.submit = function (params) {\n          $scope.loading = true;\n          authApi.signin(params.email, params.password, function (err, data) {\n            if (err) { throw err; }\n            user.init(data.accessToken, data.refreshToken);\n            $scope.loading = false;\n            \n            $state.go('home');\n          });\n        };\n\n        $scope.goFacebook = function () {\n          $scope.loading = true;\n          authApi.facebook();\n        };\n\n        $scope.goTwitter = function () {\n          $scope.loading = true;\n          authApi.twitter();\n        };\n\n        $scope.goGoogle = function () {\n          $scope.loading = true;\n          authApi.google();\n        };\n\n        $scope.goVk = function () {\n          $scope.loading = true;\n          authApi.vk();\n        };\n      }\n    ]);\n})(window, window.angular);\n(function (window, angular) {\n    \"use strict\";\n\n    var module = angular.module('signup', [\n      'ui.router',\n      'auth-api'\n    ]);\n\n    // Routes\n    module.config([\n      '$stateProvider', function ($stateProvider) {\n        $stateProvider\n          .state('signup', {\n            url: '/signup',\n            templateUrl: 'signup.html',\n            controller: 'SignupCtrl',\n            data: {\n              pageTitle: 'Sign up on Clickberry'\n            }\n          });\n        }\n    ]);\n\n    // Controllers\n    module.controller('SignupCtrl', [\n      '$scope', '$state', 'authApi',\n      function ($scope, $state, authApi) {\n\n        $scope.signup = {};\n        $scope.loading = false;\n\n        $scope.submit = function (params) {\n          $scope.loading = true;\n          authApi.signup(params.email, params.password, function (err, data) {\n            if (err) { return alert('Error: ' + err.message); }\n            $scope.loading = false;\n\n            $state.go('home');\n          });\n        };\n\n        $scope.goFacebook = function () {\n          $scope.loading = true;\n          authApi.facebook();\n        };\n\n        $scope.goTwitter = function () {\n          $scope.loading = true;\n          authApi.twitter();\n        };\n\n        $scope.goGoogle = function () {\n          $scope.loading = true;\n          authApi.google();\n        };\n\n        $scope.goVk = function () {\n          $scope.loading = true;\n          authApi.vk();\n        };\n      }\n    ]);\n})(window, window.angular);\n(function (window, angular) {\n    \"use strict\";\n\n    var module = angular.module('user', ['auth-api', 'profiles-api', 'constants', 'ngCookies']);\n\n    module.factory('user', [\n      '$rootScope', '$interval', '$location', '$window', '$cookies', 'authApi', 'profilesApi', 'events',\n        function ($rootScope, $interval, $location, $window, $cookies, authApi, profilesApi, events) {          \n          var cookieKey = 'tokens';\n          var intervalId;\n          var user = {};\n\n          var fields = {\n            id: undefined,\n            email: undefined,\n            accessToken: undefined,\n            refreshToken: undefined,\n            profile: undefined\n          };\n\n          // emits login event\n          function emitLoginEvent(data) {\n            $rootScope.$broadcast(events.login, data);\n          }\n\n          // emits logout event\n          function emitLogoutEvent() {\n            $rootScope.$broadcast(events.logout);\n          }\n\n          // persists tokens for 1 month\n          function persistTokens() {\n            if (!user.accessToken || !user.refreshToken) {\n              return;\n            }\n\n            var now = new $window.Date();\n            // this will set the expiration to 1 month\n            var exp = new $window.Date(now.getFullYear(), now.getMonth() + 1, now.getDate());\n\n            var value = {accessToken: user.accessToken, refreshToken: user.refreshToken};\n            $cookies.putObject(cookieKey, value, { expires: exp });\n          }\n\n          // restores tokens\n          function restoreTokens() {\n            return $cookies.getObject(cookieKey);\n          }\n\n          // destroys tokens\n          function destroyTokens() {\n            return $cookies.remove(cookieKey);\n          }\n\n          // refreshes tokens\n          function refreshTokens(refreshToken, fn) {\n            authApi.refresh(refreshToken, function (err, data) {\n                if (err) { throw err; }\n                fn(data);\n              });\n          }\n\n          // handles social login redirects\n          function getTokensFromSocialRedirect() {\n            var params = $location.search();\n            if (params.access_token && params.refresh_token){\n              return {\n                accessToken: params.access_token, \n                refreshToken: params.refresh_token\n              };\n            }\n          }\n\n          // set social callback\n          function setRedirectUrl() {\n            var baseUri = $location.protocol() + '://' + $location.host() + ':' + $location.port() + '/#/'; // /#/ to use angular routing\n            authApi.setRedirect(baseUri, function () {});\n          }\n\n          // inits a user account\n          function init (accessToken, refreshToken) {\n            user.accessToken = accessToken;\n            user.refreshToken = refreshToken;\n\n            // gets user account info\n            authApi.get(accessToken, function (err, data) {\n              if (err) { throw err; }\n              user.id = data.id;\n              user.email = data.email;\n              if (!user.email && data.memberships) {\n                // checking memberships\n                var i;\n                for (i = 0; i < data.memberships.length; ++i) {\n                  if (data.memberships[i].email) {\n                    user.email = data.memberships[i].email;\n                    break;\n                  }\n                }\n              }\n\n              // get profile info\n              profilesApi.public(user.id, accessToken, function (err, data) {\n                if (err) {\n                  return emitLoginEvent({id: user.id, email: user.email});\n                }\n\n                user.profile = data;\n                if (data.email) {\n                  user.email = data.email;\n                }\n                emitLoginEvent({id: user.id, email: user.email, name: user.profile.name});\n              });\n              \n            });\n\n            // save tokens\n            persistTokens();\n\n            // sets the interval to refresh token\n            intervalId = $interval(function() {\n              refreshTokens(user.refreshToken, function (tokens) {\n                user.refreshToken = tokens.refreshToken;\n                user.accessToken = tokens.accessToken;\n              });\n            }, 60000);\n          }\n\n          // destroys the account\n          function destroy () {\n            $interval.cancel(intervalId);\n            angular.extend(user, fields);\n            destroyTokens();\n            emitLogoutEvent();\n          }\n\n          // module init\n          (function moduleInit() {\n            setRedirectUrl();\n\n            // get tokens from redirect url\n            var tokens = getTokensFromSocialRedirect();\n            if (tokens) {\n              return init(tokens.accessToken, tokens.refreshToken);\n            }\n            \n            // get tokens from cookies\n            tokens = restoreTokens();\n            if (tokens) {\n              refreshTokens(tokens.refreshToken, function (newTokens) {\n                init(newTokens.accessToken, newTokens.refreshToken);\n              });\n            }\n          })();\n\n          user.init = init;\n          user.destroy = destroy;\n\n          return user;\n        }\n  ]);\n\n})(window, window.angular);\n(function (window, angular) {\n    'use strict';\n\n    var app = angular.module('clbr', [\n      'ui.router', // for ui routing\n      'ngMaterial', // activate material design\n      'home',\n      'signup',\n      'signin',\n      'profile',\n      'directives',\n      'user',\n      'exceptions'\n    ]);\n\n    // Config\n    app.config([\n      '$urlRouterProvider', '$locationProvider', '$stateProvider', '$mdThemingProvider',\n      function ($urlRouterProvider, $locationProvider, $stateProvider, $mdThemingProvider) {\n        \n        // routes\n        $stateProvider\n          .state('clbr', {\n            'abstract': true,\n            template: '<div ui-view></div>'\n          });\n\n        // html5 routing without #\n        $urlRouterProvider.otherwise('/');\n        // $locationProvider.html5Mode(true);\n\n        // theme\n        $mdThemingProvider.theme('default')\n          .primaryPalette('grey')\n          .accentPalette('green', {\n            'default': '500',\n            'hue-1': '200',\n            'hue-2': '700',\n            'hue-3': 'A200'\n          });\n      }\n    ]);\n\n    // Main application controller\n    app.controller('ClickberryCtrl', [\n      '$rootScope',\n      function ($rootScope) {\n\n        $rootScope.pageTitle = 'Clickberry Video Portal';\n        $rootScope.$on('$stateChangeSuccess', function (event, toState/*, toParams, from, fromParams*/) {\n          if (angular.isDefined(toState.data) && angular.isDefined(toState.data.pageTitle)) {\n            $rootScope.pageTitle = toState.data.pageTitle;\n          }\n        });\n      }\n    ]);\n\n})(window, window.angular);"],"file":"clbr.js","sourceRoot":"/source/"}